{
    "New function": {
        "scope": "powershell",
        "prefix": "tssnew",
        "body": [
            "function New-Tss${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    New-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${3:tag name}/New-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${3}/New-Tss${1}.ps1",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    [OutputType('${7:Class name}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # ${8:Param description}",
            "        [Parameter(Mandatory,ValueFromPipeline)]",
            "        [${9:type}]",
            "        \\$${4},",
            "",
            "    )",
            "    begin {",
            "        \\$tssNewParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssNewParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            \\$restResponse = \\$null",
            "            \\$uri = \\$TssSession.ApiUrl, '${11:endpoint}' -join '/'",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = 'POST'",
            "",
            "            \\$newBody = [ordered]@{}",
            "            switch (\\$tssNewParams.Keys) {",
            "            }",
            "            \\$invokeParams.Body = (\\$newBody | ConvertTo-Json)",
            "",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri) with:`n \\$newBody\"",
            "            if (-not \\$PSCmdlet.ShouldProcess(\"${12:Reference} \\$${4}\", \"\\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri) with \\$(\\$invokeParams.Body)\")) { return }",
            "            try {",
            "                \\$apiResponse = Invoke-TssApi @invokeParams",
            "                \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "            } catch {",
            "                Write-Warning \"Issue creating ${12:Reference} [\\$${4}]\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse) {",
            "                [${7}]\\$restResponse",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create New function"
    },
    "Search function": {
        "scope": "powershell",
        "prefix": "tsssearch",
        "body": [
            "function Search-Tss${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${2}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${3:tag name}/Search-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${3}/Search-Tss${1}.ps1",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Search-Tss${1} -TssSession \\$session -${4} ${5:some test value}",
            "",
            "    ${6:Add minimum example for each parameter}",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('${7:Class name}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Alias(\"${8:alias if desired}\")]",
            "        [${9:Class/Type}]",
            "        \\$${4},",
            "",
            "        # Sort by specific property, default ${1}Name",
            "        [string]",
            "        \\$SortBy = '${1}Name'",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            \\$uri = \\$TssSession.ApiUrl, '${10:endpoint}' -join '/'",
            "            \\$uri = \\$uri, \"sortBy[0].direction=asc&sortBy[0].name=\\$SortBy&take=\\$(\\$TssSession.Take)\" -join '?'",
            "            \\$invokeParams.Method = 'GET'",
            "",
            "            \\$filters = @()",
            "            switch (\\$tssParams.Keys) {",
            "                '${4}' { \\$filters += \"filter.${4}=\\$${4}\" }",
            "            }",
            "            if (\\$filters) {",
            "                \\$uriFilter = \\$filters -join '&'",
            "                Write-Verbose \"Filters: \\$uriFilter\"",
            "                \\$uri = \\$uri, \\$uriFilter -join '&'",
            "            }",
            "            \\$invokeParams.Uri = \\$uri",
            "",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "            try {",
            "                \\$apiResponse = Invoke-TssApi @invokeParams",
            "                \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "            } catch {",
            "                Write-Warning \"Issue on search request\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse.records.Count -le 0 -and \\$restResponse.records.Length -eq 0) {",
            "                Write-Warning \"No records found\"",
            "            }",
            "            if (\\$restResponse.records) {",
            "                [${7}[]]\\$restResponse.records",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Search function"
    },
    "Get function": {
        "scope": "powershell",
        "prefix": "tssget",
        "body": [
            "function Get-Tss${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Get-Tss${1} -TssSession \\$session -${3} ${4:some test value}",
            "",
            "    ${5:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${6:Folder Name}/Get-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${6}/Get-Tss${1}.ps1",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding()]",
            "    [OutputType('${7:Class name}')]",
            "    param (",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # Short description for parameter",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${8:Alias if needed}\")]",
            "        [${9:Class type}]",
            "        \\$${3}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${10:var name} in \\$${4}) {",
            "                \\$uri = \\$TssSession.ApiUrl, '${11:endpoint}', \\$${10} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'GET'",
            "",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "                try {",
            "                    \\$apiResponse = Invoke-TssApi @invokeParams",
            "                    \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                } catch {",
            "                    Write-Warning \"Issue getting ${12:reference name} on [\\$${10}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse.records) {",
            "                    [${7}[]]\\$restResponse.records",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Get function"
    },
    "Remove function": {
        "scope": "powershell",
        "prefix": "tssremove",
        "body": [
            "function Remove-Tss${1:Noun} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:Short of what command does}",
            "",
            "    .DESCRIPTION",
            "    ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Remove-Tss${1} -TssSession \\$session -${3} ${4:some test value}",
            "",
            "    ${5:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${6:folder}/Remove-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${6}/Remove-Tss${1}.ps1",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [CmdletBinding(SupportsShouldProcess)]",
            "    [OutputType('Thycotic.PowerShell.Common.Delete')]",
            "    param (",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # ${7:Parameter description}",
            "        [Parameter(Mandatory,ValueFromPipelineByPropertyName)]",
            "        [Alias(\"${8:Alais if needed}\")]",
            "        [${9:Type}]",
            "        \\$${3}",
            "    )",
            "    begin {",
            "        \\$tssParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${10:var name} in \\$${3}) {",
            "                \\$uri = \\$TssSession.ApiUrl, '${11:endpoint}', \\$${10} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'DELETE'",
            "",
            "                if (\\$PSCmdlet.ShouldProcess(${12:Item Description},\"\\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\")) {",
            "                    Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri) with \\$body\"",
            "                    try {",
            "                        \\$apiResponse = Invoke-TssApi @invokeParams",
            "                        \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                    } catch {",
            "                        Write-Warning \"Issue removing ${13:reference name} [\\$${10}]\"",
            "                        \\$err = \\$_",
            "                        . \\$ErrorHandling \\$err",
            "                    }",
            "",
            "                    if (\\$restResponse) {",
            "                        [Thycotic.PowerShell.Common.Delete]@{",
            "                            Id = \\$restResponse.id",
            "                            ObjectType = \\$restResponse.objectType",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }",
            "}"
        ],
        "description": "template for building a Remove function"
    },
    "set command template": {
        "prefix": "tssset",
        "body": [
            "function Set-Tss${1:object} {",
            "    <#",
            "    .SYNOPSIS",
            "    ${2:short description}",
            "",
            "    .DESCRIPTION",
            "    ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Set-Tss${1} -TssSession $session -${3:initial parameter} ",
            "",
            "    ${4:example description}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${5:folder name}/Set-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${5}/Set-Tss${1}.ps1",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [cmdletbinding(SupportsShouldProcess)]",
            "    param(",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory,ValueFromPipeline,Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # some description",
            "        [switch]",
            "        $${3},",
            "    )",
            "    begin {",
            "        \\$setParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$setParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            \\$uri = \\$TssSession.ApiUrl, '${6:endpoint}' -join '/'",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = 'PATCH'",
            "",
            "            \\$setBody = @{ data = @{ } }",
            "            switch (\\$setParams.Keys) {",
            "                '${3}' {",
            "                    \\$${7:var name} = @{",
            "                        dirty = \\$true",
            "                        value = [boolean]\\$${3}",
            "                    }",
            "                    \\$setBody.data.Add('${8:argument name}',\\$${7})",
            "                }",
            "            }",
            "            \\$invokeParams.Body = \\$setBody | ConvertTo-Json -Depth 100",
            "",
            "            if (\\$PSCmdlet.ShouldProcess(\"${9:Description}\", \"\\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri) with:`n\\$(\\$invokeParams.Body)`n\")) {",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri) with:`n\\$(\\$invokeParams.Body)`n\"",
            "                try {",
            "                    \\$apiResponse = Invoke-TssApi @invokeParams",
            "                    \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                } catch {",
            "                    Write-Warning \"Issue setting ${9}\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "            }",
            "            if (\\$restResponse) {",
            "                Write-Verbose 'Setting updated successfully'",
            "            }",
            "        } else {",
            "            Write-Warning 'No valid session found'",
            "        }",
            "    }",
            "}"
        ],
        "description": "set command template"
    },
    "Update command": {
        "prefix": "tssupdate",
        "body": [
            "function Update-Tss${1:verb} {",
            "    <#",
            "    .SYNOPSIS",
            "    Update ${2}",
            "",
            "    .DESCRIPTION",
            "    Update ${2}",
            "",
            "    .EXAMPLE",
            "    \\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "    Update-Tss${1} -TssSession \\$session -${3} ${4:some test value}",
            "",
            "    ${5:Add minimum example for each parameter}",
            "",
            "    .LINK",
            "    https://thycotic-ps.github.io/thycotic.secretserver/commands/${6:Folder name}/Update-Tss${1}",
            "",
            "    .LINK",
            "    https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${6}/Update-Tss${1}.ps1",
            "",
            "    .NOTES",
            "    Requires TssSession object returned by New-TssSession",
            "    #>",
            "    [cmdletbinding(SupportsShouldProcess)]",
            "    param(",
            "        # TssSession object created by New-TssSession for authentication",
            "        [Parameter(Mandatory, ValueFromPipeline, Position = 0)]",
            "        [Thycotic.PowerShell.Authentication.Session]",
            "        \\$TssSession,",
            "",
            "        # ${7} ID",
            "        [Parameter(Mandatory, ValueFromPipelineByPropertyName)]",
            "        [Alias('${8:alias if needed}')]",
            "        [int]",
            "        \\$${3},",
            "    )",
            "    begin {",
            "        \\$updateParams = \\$PSBoundParameters",
            "        \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "    }",
            "    process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$updateParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${10:var name} in \\$${3}) {",
            "                \\$uri = \\$TssSession.ApiUrl, '${9:endpoint}' -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'PUT'",
            "",
            "                \\$updateBody = @{}",
            "                \\$invokeParams.Body = \\$updateBody | ConvertTo-Json",
            "                if (\\$PSCmdlet.ShouldProcess(\"${10:description}: \\$${3}\", \"\\$(\\$invokeParams.Method) \\$uri with: `n\\$(\\$invokeParams.Body)\")) {",
            "                    Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with: `n\\$(\\$invokeParams.Body)\"",
            "                    try {",
            "                        \\$apiResponse = Invoke-TssApi @invokeParams",
            "                        \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                    } catch {",
            "                        Write-Warning 'Issue updating ${10} [\\$${3}]'",
            "                        \\$err = \\$_",
            "                        . \\$ErrorHandling \\$err",
            "                    }",
            "",
            "                    if (\\$restResponse) {",
            "                        Write-Verbose \"${10} \\$${3} updated successfully\"",
            "                    } else {",
            "                        Write-Warning \"${10} \\$${3} was not updated, see previous output for errors\"",
            "                    }",
            "            }",
            "            }",
            "        } else {",
            "            Write-Warning 'No valid session found'",
            "        }",
            "    }",
            "}"
        ],
        "description": "Update command"
    },
    "New tests": {
        "scope": "powershell",
        "prefix": "tsstest",
        "body": [
            "BeforeDiscovery {",
            "    \\$commandName = Split-Path (\\$PSCommandPath.Replace('.Tests.ps1','')) -Leaf",
            "}",
            "Describe \"\\$commandName verify parameters\" {",
            "    BeforeDiscovery {",
            "        [object[]]\\$knownParameters = 'TssSession',",
            "        [object[]]\\$currentParams = ([Management.Automation.CommandMetaData]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')).Parameters.Keys",
            "        [object[]]\\$commandDetails = [System.Management.Automation.CommandInfo]\\$ExecutionContext.SessionState.InvokeCommand.GetCommand(\\$commandName,'Function')",
            "        \\$unknownParameters = Compare-Object -ReferenceObject \\$knownParameters -DifferenceObject \\$currentParams -PassThru",
            "    }",
            "    Context \"Verify parameters\" -Foreach @{currentParams = \\$currentParams } {",
            "        It \"\\$commandName should contain <_> parameter\" -TestCases \\$knownParameters {",
            "            \\$_ -in \\$currentParams | Should -Be \\$true",
            "        }",
            "        It \"\\$commandName should not contain parameter: <_>\" -TestCases \\$unknownParameters {",
            "            \\$_ | Should -BeNullOrEmpty",
            "        }",
            "    }",
            "    Context \"Command specific details\" {",
            "        It \"\\$commandName should set OutputType to ${1:Class name}\" -TestCases \\$commandDetails {",
            "            \\$_.OutputType.Name | Should -Be '${1}'",
            "        }",
            "    }",
            "}"
        ],
        "description": "New tests"
    },
    "Functional tests": {
        "scope": "powershell",
        "prefix": "tsstestfunctions",
        "body": [
            "Describe \"\\$commandName functions\" {",
            "    Context \"Checking\" {",
            "        BeforeAll {",
            "            \\$session = [pscustomobject]@{",
            "                ApiVersion         = 'api/v1'",
            "                Take               = 2147483647",
            "                SecretServer       = 'http://alpha/'",
            "                SecretServerVersion= '10.9.000064'",
            "                ApiUrl             = 'http://alpha/api/v1'",
            "                AccessToken        = 'AgJf5YLChrisPine312UcBrM1s1KB2BGZ5Ufc4qLZ'",
            "                RefreshToken       = '9oacYeah0YqgBNg0L7VinDiesel6-Z9ITE51Humus'",
            "                TokenType          = 'bearer'",
            "                ExpiresIn          = 1199",
            "            }",
            "",
            "            Mock -Verifiable -CommandName Invoke-RestMethod -ParameterFilter { \\$Uri -match '/${1:Endpoint}' } -MockWith {",
            "                return [pscustomobject]@{",
            "                    # Object expected by REST API call",
            "                }",
            "            }",
            "            \\$object = ${2:Public Function name} -TssSession \\$session ${3:Parameters}",
            "            Assert-VerifiableMock",
            "        }",
            "        It \"Should not be empty\" {",
            "            \\$object | Should -Not -BeNullOrEmpty",
            "        }",
            "        It \"Should have property <_>\" -TestCases ${4:Properties} {",
            "            \\$object[0].PSObject.Properties.Name | Should -Contain \\$_",
            "        }",
            "        It \"Should have property ${5:Property} equal ${6:value}\" {",
            "            \\$object.${5} | Should -Be ${6}",
            "        }",
            "        It \"Should have called Invoke-RestMethod 2 times\" {",
            "            Assert-MockCalled -CommandName Invoke-RestMethod -Times 2 -Scope Describe",
            "        }",
            "        It \"Should have called Invoke-RestMethod 2 times\" {",
            "            Assert-MockCalled -CommandName Invoke-RestMethod -Times 2 -Scope Describe",
            "        }",
            "    }",
            "}"
        ],
        "description": "New tests"
    },
    "About Help": {
        "scope": "markdown",
        "prefix": "tssabout",
        "body": [
            "TOPIC",
            "    This help topic describes the ${1:Class name} class in the Thycotic.SecretServer module",
            "",
            "CLASS",
            "    ${1}",
            "",
            "INHERITANCE",
            "    None",
            "",
            "DESCRIPTION",
            "    The ${1} class represents the object returned by Secret Server endpoint ${2:endpoint}",
            "",
            "CONSTRUCTORS",
            "    new()",
            "",
            "PROPERTIES",
            "    ${3: properties}",
            "",
            "METHODS",
            "",
            "RELATED LINKS:",
            "    ${4:Function name utilizing it, list multiple if it applies}"
        ],
        "description": "template for the about_classname_help.txt files"
    },
    "Generic API call": {
        "scope": "powershell",
        "prefix": "tssapi",
        "body": [
            "\\$SecretServerHost = '${1:SS URL}'",
            "\\$apiUrl = \"\\$SecretServerHost/api/v1\"",
            "",
            "\\$Body = @{",
            "    \"grant_type\" = \"password\"",
            "    \"username\"   = '${2:Username}'",
            "    \"password\"   = '${3:password}'",
            "}",
            "\\$token = Invoke-RestMethod -Method Post -Uri \"\\$SecretServerHost/oauth2/token\" -Body \\$Body",
            "\\$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"",
            "\\$headers.Add(\"Authorization\", \"Bearer \\$(\\$token.access_token)\")",
            "",
            "\\$url = \"\\$apiUrl/${4:endpoint and params}\"",
            "Invoke-RestMethod -Method ${5:Method} -Uri \\$url -Headers \\$headers -ContentType 'application/json'",
            ""
        ],
        "description": "Generic API call"
    },
    "Generic REST API call w/ request body": {
        "scope": "powershell",
        "prefix": "tssapibody",
        "body": [
            "\\$SecretServerHost = '${1:SS URL}'",
            "\\$apiUrl = \"\\$SecretServerHost/api/v1\"",
            "",
            "\\$Body = @{",
            "    \"grant_type\" = \"password\"",
            "    \"username\"   = '${2:username}'",
            "    \"password\"   = '${3:password}'",
            "}",
            "\\$token = Invoke-RestMethod -Method Post -Uri \"\\$SecretServerHost/oauth2/token\" -Body \\$Body",
            "\\$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"",
            "\\$headers.Add(\"Authorization\", \"Bearer \\$(\\$token.access_token)\")",
            "",
            "\\$body = @{",
            "    data = @{",
            "        ${6:propertyName} = @{",
            "            dirty = \\$true",
            "            value = ${7:value}",
            "        }",
            "    }",
            "} | ConvertTo-Json",
            "\\$url = \"\\$apiUrl/${4:endpoint and params}\"",
            "Invoke-RestMethod -Method ${5:Method} -Uri \\$url -Headers \\$headers -Body \\$body -ContentType 'application/json'",
            ""
        ],
        "description": "Generic REST API call w/ request body"
    },
    "Changelog release": {
        "scope": "markdown",
        "prefix": "tsschangelog",
        "body": [
            "## Unreleased -- 2021-xx-xx",
            "",
            "### Breaking Changes",
            "",
            "* None",
            "",
            "### Bug Fixes",
            "",
            "* None",
            "",
            "### New Stuff",
            "",
            "* None",
            "",
            "### General Updates",
            "",
            "* None",
            "",
            "### Tests",
            "",
            "* None",
            ""
        ],
        "description": "Changelog release"
    },
    "tss Comment-Based help template": {
        "prefix": "tsscbh",
        "body": [
            "<#",
            ".SYNOPSIS",
            "${1:Text explaining endpoint}",
            "",
            ".DESCRIPTION",
            "${1}",
            "",
            ".EXAMPLE",
            "\\$session = New-TssSession -SecretServer https://alpha -Credential \\$ssCred",
            "${2:public command name} -TssSession \\$session ${3:parameters used and sample values}",
            "",
            "${4:description of example}",
            "",
            ".LINK",
            "https://thycotic-ps.github.io/thycotic.secretserver/commands/${5:folder}/${2}",
            "",
            ".LINK",
            "https://github.com/thycotic-ps/thycotic.secretserver/blob/main/src/functions/${5}/${2}.ps1",
            "",
            ".NOTES",
            "Requires TssSession object returned by New-TssSession",
            "#>",
            ""
        ],
        "description": "TSS Comment-Based help template"
    },
    "tss basic begin": {
        "prefix": "tssbegin",
        "body": [
            "[CmdletBinding()]",
            "[OutputType('${1:Class name}')]",
            "param (",
            "    # TssSession object created by New-TssSession for authentication",
            "    [Parameter(Mandatory, ValueFromPipeline, Position = 0)]",
            "    [Thycotic.PowerShell.Authentication.Session]",
            "    \\$TssSession,",
            "",
            "    # ${2:Description}",
            "    [Parameter(Mandatory, ValueFromPipelineByPropertyName)]",
            "    [Alias('${3:Alias}')]",
            "    [int[]]",
            "    \\$${4:Parameter},",
            ")",
            "begin {",
            "    \\$tssParams = \\$PSBoundParameters",
            "    \\$invokeParams = . \\$GetInvokeApiParams \\$TssSession",
            "}"
        ],
        "description": "tss basic begin"
    },
    "tss basic process": {
        "prefix": "tssprocbasic",
        "body": [
            "process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '11.0.000005' \\$PSCmdlet.MyInvocation",
            "            \\$uri = \\$TssSession.ApiUrl, ${1:Endpoint} -join '/'",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = '${2:METHOD}'",
            "",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "            try {",
            "                \\$apiResponse = Invoke-TssApi @invokeParams",
            "                \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "            } catch {",
            "                Write-Warning \"Issue getting ${3:object description}\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            "",
            "            if (\\$restResponse) {",
            "                [${4:Class name}[]]\\$restResponse",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }"
        ],
        "description": "tss basic process"
    },
    "tss process foreach loop": {
        "prefix": "tssprocforeach",
        "body": [
            "process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '11.0.000005' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${2:variable name} in \\$${1:Parameter Name}) {",
            "                \\$uri = \\$TssSession.ApiUrl, ${3:endpoint}, \\$${2} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = '${4:METHOD}'",
            "",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "                try {",
            "                    \\$apiResponse = Invoke-TssApi @invokeParams",
            "                    \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                } catch {",
            "                    Write-Warning \"Issue getting ${5:Object name} [\\$${2}]\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    [${6:Class Name}[]]\\$restResponse",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning \"No valid session found\"",
            "        }",
            "    }"
        ],
        "description": "tss process foreach loop"
    },
    "tss process block - body required": {
        "prefix": "tssprocbody",
        "body": [
            "process {",
            "        Get-TssInvocation \\$PSCmdlet.MyInvocation",
            "        if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            \\$uri = \\$TssSession.ApiUrl, ${1:endpoint} -join '/'",
            "            \\$invokeParams.Uri = \\$uri",
            "            \\$invokeParams.Method = '${2:Method}'",
            "",
            "            \\$${3:object name}Body = @{ data = @{} }",
            "            switch (\\$${3}Params.Keys) {",
            "                '${4:parameter name}' {",
            "                    \\$${5:reference name}Value = @{",
            "                        dirty = \\$true",
            "                        value = \\$${4}",
            "                    }",
            "                    \\$${3}Body.data.Add('${4}',$${5}Value)",
            "                }",
            "            }",
            "            \\$invokeParams.Body = \\$${3}Body | ConvertTo-Json -Depth 100",
            "            if (\\$PSCmdlet.ShouldProcess(\"description: \\$\", \"\\$(\\$invokeParams.Method) \\$uri with: `n\\$(\\$invokeParams.Body)\")) {",
            "                Write-Verbose \"\\$(\\$invokeParams.Method) \\$uri with: `n\\$(\\$invokeParams.Body)\"",
            "                try {",
            "                    \\$apiResponse = Invoke-TssApi @invokeParams",
            "                    \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                } catch {",
            "                    Write-Warning 'Issue ${6:warning message}'",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    [${7:class name}]\\$restResponse",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning 'No valid session found'",
            "        }",
            "    }"
        ],
        "description": "tss process block - body required"
    },
    "tss begin - restricted params": {
        "prefix": "tssbeginrestricted",
        "body": [
            "        \\$restrictedParamSet = . \\$ParameterSetParams \\$PSCmdlet.MyInvocation.MyCommand.Name 'restricted'",
            "        \\$restrictedParams = @()",
            "        foreach (\\$r in \\$restrictedParamSet) {",
            "            if (\\$tssParams.ContainsKey(\\$r)) {",
            "                \\$restrictedParams += \\$r",
            "            }",
            "        }"
        ],
        "description": "tss begin - restricted params"
    },
    "tss process - restricted params": {
        "prefix": "tssprocrestricted",
        "body": [
            "                \\$${1:object name}Body = @{}",
            "                if (\\$restrictedParams.Count -gt 0) {",
            "                    switch (\\$tssParams.Keys) {",
            "                        'Comment' { \\$${1}Body.Add('comment', \\$Comment) }",
            "                        'ForceCheckIn' { \\$${1}Body.Add('forceCheckIn', [boolean]\\$ForceCheckIn) }",
            "                        'TicketNumber' { \\$${1}Body.Add('ticketNumber', \\$TicketNumber) }",
            "                        'TicketSystemId' { \\$${1}Body.Add('ticketSystemId', \\$TicketSystemId) }",
            "                        'DoublelockPassword' {",
            "                            $passwd = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR(\\$DoublelockPassword))",
            "                            \\$${1}Body.Add('doubleLockPassword', \\$passwd)",
            "                        }",
            "                    }",
            "",
            "                    \\$uri = \\$uri, 'restricted' -join '/'",
            "                    \\$invokeParams.Uri = \\$uri",
            "                    \\$invokeParams.Method = 'POST'",
            "                    \\$invokeParams.Body = \\$${1}Body | ConvertTo-Json",
            "                } else {",
            "                    \\$uri = \\$uri",
            "                    \\$invokeParams.Uri = \\$uri",
            "                    \\$invokeParams.Method = 'GET'",
            "                }"
        ],
        "description": "tss process - restricted params"
    },
    "tss rest basic call process block": {
        "prefix": "tssrestbasicforeaget",
        "body": [
            "            if (\\$tssParams.ContainsKey('TssSession') -and \\$TssSession.IsValidSession()) {",
            "            Compare-TssVersion \\$TssSession '10.9.000064' \\$PSCmdlet.MyInvocation",
            "            foreach (\\$${1:object name} in \\$${2:Parameter}) {",
            "                \\$uri = \\$TssSession.ApiUrl, ${3:endpoint} -join '/'",
            "                \\$invokeParams.Uri = \\$uri",
            "                \\$invokeParams.Method = 'GET'",
            "",
            "                Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "                try {",
            "                    \\$apiResponse = Invoke-TssApi @invokeParams",
            "                    \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "                } catch {",
            "                    Write-Warning \"Issue getting ${4:message}\"",
            "                    \\$err = \\$_",
            "                    . \\$ErrorHandling \\$err",
            "                }",
            "",
            "                if (\\$restResponse) {",
            "                    [${5:class name}]\\$restResponse",
            "                }",
            "            }",
            "        } else {",
            "            Write-Warning 'No valid session found'",
            "        }"
        ],
        "description": "tss rest basic call loop for GET"
    },
    "tss basic rest call 2": {
        "prefix": "tssrestbasic2",
        "body": [
            "            if (-not \\$PSCmdlet.ShouldProcess(\"${1:reference name} ID: \\$${2:parameter}\", \"\\$(\\$invokeParams.Method) \\$uri\")) { return }",
            "            Write-Verbose \"Performing the operation \\$(\\$invokeParams.Method) \\$(\\$invokeParams.Uri)\"",
            "            try {",
            "                \\$apiResponse = Invoke-TssApi @invokeParams",
            "                \\$restResponse = . \\$ProcessResponse \\$apiResponse",
            "            } catch {",
            "                Write-Warning \"${3:message}\"",
            "                \\$err = \\$_",
            "                . \\$ErrorHandling \\$err",
            "            }",
            ""
        ],
        "description": "tss basic rest call 2"
    },
    "Format ps1xml snippet": {
        "scope": "xml",
        "prefix": "tssformat",
        "body": [
            "",
            "    <!-- ${1:Class Name} -->",
            "    <View>",
            "      <Name>${1}</Name>",
            "      <ViewSelectedBy>",
            "        <TypeName>${1}</TypeName>",
            "      </ViewSelectedBy>",
            "      <TableControl>",
            "        <TableHeaders>",
            "          <TableColumnHeader />",
            "        </TableHeaders>",
            "        <TableRowEntries>",
            "          <TableRowEntry>",
            "            <TableColumnItems>",
            "              <TableColumnItem>",
            "                <PropertyName>${2:Column}</PropertyName>",
            "              </TableColumnItem>",
            "            </TableColumnItems>",
            "          </TableRowEntry>",
            "        </TableRowEntries>",
            "      </TableControl>",
            "    </View>",
            ""
        ],
        "description": "Format ps1xml snippet"
    },
    "cmdlet base": {
        "prefix": "tsscmdlet",
        "body": [
            "using System;",
            "using System.Collections.Generic;",
            "using System.Management.Automation;",
            "using System.Management.Automation.Runspaces;",
            "",
            "namespace Thycotic.SecretServer.Cmdlets",
            "{",
            "    /// <summary>",
            "    /// <para type=\"synopsis\">${1:synopsis summary}</para>",
            "    /// <para type=\"description\">${1}</para>",
            "    /// </summary>",
            "    [Cmdlet(${2:VerbClass - VersCommon}, \"${3:Noun}\", HelpUri = \"https://thycotic-ps.github.io/thycotic.secretserver/${4:folder name}/${5:public name}\")]",
            "    public class ${6:Name}Cmdlet : PSCmdlet",
            "    {",
            "        ///<summary>",
            "        ///<para type=\"description\">TssSession object created by New-TssSession for authentication</para>",
            "        ///</summary>",
            "        [Parameter(Mandatory = true, Position = 0, ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]",
            "        public Thycotic.PowerShell.Authentication.Session TssSession {get; set;}",
            "",
            "        protected override void ProcessRecord()",
            "        {",
            "            base.ProcessRecord();",
            "        }",
            "    }",
            "}"
        ],
        "description": "cmdlet base"
    },
    "Base C# class library": {
        "prefix": "tssclass",
        "body": [
            "using System;",
            "using System.Threading.Tasks;",
            "using System.Management.Automation;",
            "using System.Management.Automation.Runspaces;",
            "",
            "namespace Thycotic.PowerShell.${1:Tag name}",
            "{",
            "    public class ${2:Class Name}",
            "    {",
            "        public ${3:type} ${4:property name} { get; set; }",
            "        public ${5:type} ${6:property name} { get; } = \"${7:default value}\";",
            "",
            "        public ${8:method output type} ${9:method name}()",
            "        {",
            "        }",
            "    }",
            "}"
        ],
        "description": "Base C# class library"
    },
    "new enum": {
        "prefix": "tssenum",
        "body": [
            "using System;",
            "using System.Threading.Tasks;",
            "using System.Management.Automation;",
            "using System.Management.Automation.Runspaces;",
            "",
            "namespace Thycotic.PowerShell.Enums",
            "{",
            "    public enum ${1:Name}",
            "    {",
            "        ${2:enum},",
            "        ${3:enum},",
            "        ${4:enum}",
            "    }",
            "}"
        ],
        "description": "new enum"
    }
}